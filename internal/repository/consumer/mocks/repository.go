// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	model "content-producer-manager/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Consume provides a mock function with given fields: senderID
func (_m *Repository) Consume(senderID int) ([]model.Metadata, error) {
	ret := _m.Called(senderID)

	var r0 []model.Metadata
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.Metadata, error)); ok {
		return rf(senderID)
	}
	if rf, ok := ret.Get(0).(func(int) []model.Metadata); ok {
		r0 = rf(senderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Metadata)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(senderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreFile provides a mock function with given fields: metadata
func (_m *Repository) StoreFile(metadata *model.Metadata) error {
	ret := _m.Called(metadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Metadata) error); ok {
		r0 = rf(metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
